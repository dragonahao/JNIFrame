/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string.h>
#include <jni.h>
#include <android/log.h>
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

/* Header for class com_brunjoy_Setting */

#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, "setting", __VA_ARGS__))
#define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, "setting", __VA_ARGS__))
#define LOGE(...) ((void)__android_log_print(ANDROID_LOG_ERROR, "setting", __VA_ARGS__))

#ifndef _Included_com_brunjoy_Setting
#define _Included_com_brunjoy_Setting
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     com_brunjoy_Setting
 * Method:    set
 * Signature: (II)Z
 */JNIEXPORT jboolean JNICALL Java_com_brunjoy_Setting_set(JNIEnv * env,
		jobject obj, jint key, jint value) {
	LOGW("Java_com_brunjoy_Setting_set");
	return false;
}

/*
 * Class:     com_brunjoy_Setting
 * Method:    setParam
 * Signature: (I)Z
 */JNIEXPORT jboolean JNICALL Java_com_brunjoy_Setting_setParam(JNIEnv * env,
		jobject obj, jint key) {

	return false;
}

/*
 * Class:     com_brunjoy_Setting
 * Method:    getParam
 * Signature: (I)Ljava/lang/String;
 */JNIEXPORT jstring JNICALL Java_com_brunjoy_Setting_getParam(JNIEnv * env,
		jobject obj, jint key) {

	return env->NewStringUTF("getParam key  failue ");
}

 JNIEXPORT jstring JNICALL getParam(JNIEnv * env,
 		jobject obj, jint key) {

 	return env->NewStringUTF(" local    getParam key  failue ");
 }

/*
 * 这里是onload
 */
#define JNIREG_CLASS "com/brunjoy/Setting"//指定要注册的类
/**
 * Table of methods associated with a single class.
 */
static JNINativeMethod gMethods[] = {//绑定
		{ "getParam", "(I)Ljava/lang/String;",	(void*) getParam },
		{ "setParam", "(I)Z",					(void*) Java_com_brunjoy_Setting_setParam },
		{ "set", "(II)Z",					(void*) Java_com_brunjoy_Setting_set },
		};

/*
 * Register several native methods for one class.
 */
static int registerNativeMethods(JNIEnv* env, const char* className,
		JNINativeMethod* gMethods, int numMethods) {
	jclass clazz;

	clazz = env->FindClass(className);
	if (clazz == NULL) {
		return JNI_FALSE;
	}
	if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
		return JNI_FALSE;
	}

	return JNI_TRUE;
}

/*
 * Register native methods for all classes we know about.
 */
static int registerNatives(JNIEnv* env) {
	if (!registerNativeMethods(env, JNIREG_CLASS, gMethods,
			sizeof(gMethods) / sizeof(gMethods[0])))
		return JNI_FALSE;

	return JNI_TRUE;
}


/*
 * Set some test stuff up.
 *
 * Returns the JNI version on success, -1 on failure.
 */JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
	JNIEnv* env = NULL;
	jint result = -1;
	LOGE("JNI_OnLoad starting----------------");
	if (vm->GetEnv((void**) &env, JNI_VERSION_1_4) != JNI_OK) {
		return -1;
	}
	assert(env != NULL);

	if (!registerNatives(env)) { //注册
		return -1;
	}

	/* success -- return valid version number */
	result = JNI_VERSION_1_4;
	LOGE("JNI_OnLoad end ---------------------");
	return result;
}


#ifdef __cplusplus
}
#endif
#endif
