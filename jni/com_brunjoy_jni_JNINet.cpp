/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string.h>

//#include <stdlib.h>
//#include <stdio.h>
#include <assert.h>
#include "mynet.h"
#include <android/log.h>
#define LOGI(...) ((void)__android_log_print(ANDROID_LOG_INFO, "setting", __VA_ARGS__))
#define LOGW(...) ((void)__android_log_print(ANDROID_LOG_WARN, "setting", __VA_ARGS__))
#define LOGE(...) ((void)__android_log_print(ANDROID_LOG_ERROR, "setting", __VA_ARGS__))
/* Header for class com_brunjoy_jni_JNINet */
/*
 #ifndef _Included_com_brunjoy_JNINet
 #define _Included_com_brunjoy_JNINet
 #ifdef __cplusplus
 extern "C" {
 #endif
 */
static net myNet;
/*
 * Class:     com_brunjoy_jni_JNINet
 * Method:    setHost
 * Signature: (Ljava/lang/String;)Z
 */JNIEXPORT jboolean JNICALL Java_com_brunjoy_jni_JNINet_setHost(JNIEnv * env,
		jobject obj, jstring hostStr) {
	const char*host = env->GetStringUTFChars(hostStr, 0);

	myNet.setHost(host);
	env->ReleaseStringUTFChars(hostStr, host);
	return true;
}
;

/*
 * Class:     com_brunjoy_jni_JNINet
 * Method:    setPort
 * Signature: (I)Z
 */JNIEXPORT jboolean JNICALL Java_com_brunjoy_jni_JNINet_setPort(JNIEnv * env,
		jobject obj, jint port) {
	myNet.setPort(port);
	return true;
}
;
/*
 * Class:     com_brunjoy_jni_JNINet
 * Method:    doGet
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */JNIEXPORT jstring JNICALL doGet(JNIEnv * env,
		jobject obj, jstring pathStr) {
	LOGI("start==555=====Java_com_brunjoy_jni_JNINet_doGet");
	const char*path = env->GetStringUTFChars(pathStr, 0);

	const char* content = myNet.receviceByURL(myNet.getUrlStr(path, true));
	env->ReleaseStringUTFChars(pathStr, path);
	LOGI("content=");
	LOGI(content);
	LOGI("end================Java_com_brunjoy_jni_JNINet_doGet");

	return env->NewStringUTF(content);
}
;

/*
 * Class:     com_brunjoy_jni_JNINet
 * Method:    doPost
 * Signature: (Ljava/lang/String;)Ljava/lang/String;
 */JNIEXPORT jstring JNICALL Java_com_brunjoy_jni_JNINet_doPost(JNIEnv * env,
		jobject obj, jstring pathStr) {
	const char*path = env->GetStringUTFChars(pathStr, 0);
	const char* content = myNet.receviceByURL(myNet.getUrlStr(path, false));
	env->ReleaseStringUTFChars(pathStr, path);
	return env->NewStringUTF(path);
}
;
/*
 * 这里是onload
 */
#define JNIREG_CLASS "com/brunjoy/jni/JNINet"//指定要注册的类
/**
 * Table of methods associated with a single class.
 */
static JNINativeMethod gMethods[] = { //绑定
		{ "setHost", "(Ljava/lang/String;)Z",
				(void*) Java_com_brunjoy_jni_JNINet_setHost }, { "setPort",
				"(I)Z", (void*) Java_com_brunjoy_jni_JNINet_setPort }, {
				"doGet", "(Ljava/lang/String;)Ljava/lang/String;",
				(void*) doGet }, { "doPost",
				"(Ljava/lang/String;)Ljava/lang/String;",
				(void*) Java_com_brunjoy_jni_JNINet_doPost }, };
;

/*
 * Register several native methods for one class.
 */
static int registerNativeMethods(JNIEnv* env, const char* className,
		JNINativeMethod* gMethods, int numMethods) {
	jclass clazz;

	clazz = env->FindClass(className);
	if (clazz == NULL) {
		return JNI_FALSE;
	}
	if (env->RegisterNatives(clazz, gMethods, numMethods) < 0) {
		return JNI_FALSE;
	}

	return JNI_TRUE;
}

/*
 * Register native methods for all classes we know about.
 */
static int registerNatives(JNIEnv* env) {
	if (!registerNativeMethods(env, JNIREG_CLASS, gMethods,
			sizeof(gMethods) / sizeof(gMethods[0])))
		return JNI_FALSE;

	return JNI_TRUE;
}

/*
 * Set some test stuff up.
 *
 * Returns the JNI version on success, -1 on failure.
 */JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved) {
	JNIEnv* env = NULL;
	jint result = -1;
	LOGE("JNI_OnLoad starting----------------");
	if (vm->GetEnv((void**) &env, JNI_VERSION_1_4) != JNI_OK) {
		return -1;
	}
	assert(env != NULL);

	if (!registerNatives(env)) { //注册
		return -1;
	}

	/* success -- return valid version number */
	result = JNI_VERSION_1_4;
	LOGE("JNI_OnLoad end ---------------------");
	return result;
}
/*

 #ifdef __cplusplus
 }
 #endif
 #endif
 */
